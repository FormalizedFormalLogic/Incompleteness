import Mathlib.Data.Finite.Card
import Incompleteness.ProvabilityLogic.Basic
import Foundation.Modal.Kripke.GL.Tree


section

lemma _root_.Nat.lt_succ_sub {i : ‚Ñï} (hi : i ‚â† 0) : i < n + 1 ‚Üí i - 1 < n := by induction i <;> simp_all;

end


namespace LO.System

open FiniteContext

variable {F : Type*} [LogicalConnective F] [DecidableEq F]
         {S : Type*} [System F S]
         {ùì¢ : S} [System.Classical ùì¢]
         {p q r : F}
         {Œì Œî : List F}

lemma conj_disj_demorgan‚ÇÇ'! (h : ùì¢ ‚ä¢! ‚ãÄŒì.map (‚àº¬∑)) : ùì¢ ‚ä¢! ‚àº‚ãÅŒì := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp;
  | hsingle q => simp_all;
  | hcons q Œì hŒì ih =>
    replace h : ùì¢ ‚ä¢! ‚àºq ‚ãè (‚ãÄŒì.map (‚àº¬∑)) := by
      have e := List.conj‚ÇÇ_cons_nonempty (a := ‚àºq) (as := Œì.map (‚àº¬∑)) (by simpa using hŒì);
      simpa [‚Üêe] using h;
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    apply demorgan‚ÇÇ'!;
    apply and‚ÇÉ'!;
    . exact and‚ÇÅ'! h;
    . exact ih $ and‚ÇÇ'! h

lemma conj_disj_demorgan‚ÇÇ_suppl'! (h : ùì¢ ‚ä¢! p ‚ûù ‚ãÄŒì.map (‚àº¬∑)) : ùì¢ ‚ä¢! p ‚ûù ‚àº‚ãÅŒì :=
  deduct'! $ conj_disj_demorgan‚ÇÇ'! $ (of'! h) ‚®Ä by_axm!

omit [DecidableEq F] in
lemma disj_mem! (h : p ‚àà Œì) : ùì¢ ‚ä¢! p ‚ûù ‚ãÅŒì := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp at h;
  | hsingle q =>
    replace h : p = q := by simpa using h;
    subst h;
    simp;
  | hcons q Œì hŒì ih =>
    replace h : p = q ‚à® p ‚àà Œì := by simpa using h;
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    rcases h with (rfl | h);
    . exact or‚ÇÅ!;
    . exact imply_right_or'! $ ih h

lemma not_imply_prem''! (hpq : ùì¢ ‚ä¢! p ‚ûù q) (hpnr : ùì¢ ‚ä¢! p ‚ûù ‚àº(r)) : ùì¢ ‚ä¢! p ‚ûù ‚àº(q ‚ûù r) :=
  deduct'! $ (contra‚ÇÄ'! $ not_or_of_imply!) ‚®Ä (demorgan‚ÇÇ'! $ and‚ÇÉ'! (dni'! $ of'! hpq ‚®Ä (by_axm!)) (of'! hpnr ‚®Ä (by_axm!)))

lemma disj_intro (h : ‚àÄ q ‚àà Œì, ùì¢ ‚ä¢! q ‚ûù p) : ùì¢ ‚ä¢! ‚ãÅŒì ‚ûù p := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp;
  | hsingle q => simp_all;
  | hcons q Œì hŒì ih =>
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := by simpa using h;
    replace h‚ÇÇ := ih h‚ÇÇ;
    exact or‚ÇÉ''! h‚ÇÅ h‚ÇÇ;

end LO.System



namespace LO.Modal.Kripke

namespace FiniteTransitiveTree

variable {F : FiniteTransitiveTree}

noncomputable def size (F : FiniteTransitiveTree) : ‚Ñï := Nat.card F.World

@[simp] lemma size_le_0 : 0 < F.size := Finite.card_pos

def world_selector (F : FiniteTransitiveTree) : Fin F.size ‚Üí F.World := by sorry

lemma world_selector.bijective : (Function.Bijective F.world_selector) := by sorry

lemma world_selector.zero : F.world_selector ‚ü®0, by simp‚ü© = F.root := by sorry;


noncomputable def get_world (F : FiniteTransitiveTree) (i : Fin F.size) : F.World := F.world_selector i

lemma get_world_zero_root : F.get_world ‚ü®0, by simp‚ü© = F.root := world_selector.zero

noncomputable def get_index (F : FiniteTransitiveTree) (w : F.World) : Fin F.size := world_selector.bijective.2 w |>.choose

lemma get_index_get_world : F.get_index (F.get_world i) = i := by sorry;

set_option pp.proofs true in
@[simp]
lemma get_world_get_index : F.get_world (F.get_index wi) = wi := by
  simp [get_world, get_index];
  sorry;

@[simp]
lemma cannotback_zero : ¬¨(x ‚â∫ F.get_world ‚ü®0, by simp‚ü©) := by
  rw [get_world_zero_root];
  sorry;

end FiniteTransitiveTree


open Modal.Formula.Kripke
instance {M : FiniteTransitiveTreeModel} : Semantics (Modal.Formula ‚Ñï) (M.World) := ‚ü®Œª b a => Satisfies M.toModel b a‚ü©


end LO.Modal.Kripke




namespace LO.ProvabilityLogic

open Classical

open System System.FiniteContext
open Modal.Formula
open Modal.Formula.Kripke
open Modal.Kripke
open FirstOrder.DerivabilityCondition
open FirstOrder.DerivabilityCondition.ProvabilityPredicate

variable {T U : FirstOrder.Theory ‚Ñí‚Çí·µ£} {ùîÖ : ProvabilityPredicate T T}
variable {M : FiniteTransitiveTreeModel}

structure SolovaySentences
  {T U : FirstOrder.Theory ‚Ñí‚Çí·µ£}
  (ùîÖ : ProvabilityPredicate T U)
  (M : FiniteTransitiveTreeModel)
  where
    Œ¶ : List (FirstOrder.Sentence ‚Ñí‚Çí·µ£)
    eq_length_model_size : Œ¶.length = M.size + 1
    S1 : T ‚ä¢!. ‚ãÅŒ¶
    S2 : ‚àÄ i : Fin Œ¶.length, ‚àÄ j : Fin Œ¶.length, i ‚â† j ‚Üí T ‚ä¢!. Œ¶[i] ‚ûù ‚àºŒ¶[j]
    S3 :
      ‚àÄ i : Fin Œ¶.length, (hi : i ‚â† ‚ü®0, by omega‚ü©) ‚Üí
      letI Œ¶' := List.finRange Œ¶.length
        |>.filter (Œª j =>
            letI wi : M.World := M.get_world ‚ü®i.1 - 1, by omega‚ü©
            letI wj : M.World := M.get_world ‚ü®j.1 - 1, by omega‚ü©
            wi ‚â∫ wj
          )
        |>.map (Œª j => Œ¶[j]);
      T ‚ä¢!. Œ¶[i] ‚ûù ùîÖ (‚ãÅŒ¶')
    S4 :
      ‚àÄ i : Fin Œ¶.length, (hi : i ‚â† ‚ü®0, by omega‚ü©) ‚Üí
      ‚àÄ j : Fin Œ¶.length, (hj : j ‚â† ‚ü®0, by omega‚ü©) ‚Üí
      letI wi : M.World := M.get_world ‚ü®i.1 - 1, by omega‚ü©;
      letI wj : M.World := M.get_world ‚ü®j.1 - 1, by omega‚ü©;
      wi ‚â∫ wj ‚Üí
      T ‚ä¢!. ùîÖ (‚àºŒ¶[j]) ‚ûù ‚àºŒ¶[i]

namespace SolovaySentences

-- instance : CoeSort (SolovaySentences M ùîÖ) (List (Sentence ‚Ñí‚Çí·µ£)) := ‚ü®Œª Œ¶ => Œ¶.Œ¶‚ü©

attribute [simp] eq_length_model_size

variable {Œ¶ : SolovaySentences ùîÖ M}

abbrev length (Œ¶ : SolovaySentences ùîÖ M) : ‚Ñï := Œ¶.Œ¶.length

@[simp]
lemma ln_zero : 0 < Œ¶.length := by
  rw [length, Œ¶.eq_length_model_size];
  simp;

lemma ln_M_size {i : Fin Œ¶.length} (hi : i ‚â† ‚ü®0, ln_zero‚ü© := by assumption) : i - 1 < M.size := by
  have := i.2;
  simp only [eq_length_model_size] at this;
  exact Nat.lt_succ_sub ((Fin.ne_iff_vne i ‚ü®0, by simp‚ü©).mp hi) this;

noncomputable def realization (Œ¶ : SolovaySentences ùîÖ M) : Realization ‚Ñï ‚Ñí‚Çí·µ£ := Œª a =>
  letI Œ¶' := List.finRange Œ¶.length
    |>.filter (Œª i =>
      if hi : i = ‚ü®0, ln_zero‚ü© then False
      else Kripke.Satisfies M.toModel (M.get_world ‚ü®i.1 - 1, ln_M_size‚ü©) a
    )
    |>.map (Œª i => Œ¶.Œ¶[i]);
  ‚ãÅŒ¶'

end SolovaySentences


variable [ùîÖ.HBL]
variable {Œ¶ : SolovaySentences ùîÖ M}
variable {œÜ : Modal.Formula ‚Ñï}

lemma lemma3
  (Œ¶ : SolovaySentences ùîÖ M) (i : Fin Œ¶.length) (hi : i ‚â† ‚ü®0, by simp‚ü©)
  (œÜ : Modal.Formula ‚Ñï) :
  let wi : M.World := M.get_world ‚ü®i - 1, SolovaySentences.ln_M_size hi‚ü©
  (wi ‚äß œÜ ‚Üí T ‚ä¢!. Œ¶.Œ¶[i] ‚ûù (Œ¶.realization.interpret ùîÖ œÜ)) ‚àß (¬¨(wi ‚äß œÜ) ‚Üí T ‚ä¢!. Œ¶.Œ¶[i] ‚ûù ‚àº(Œ¶.realization.interpret ùîÖ œÜ))
   := by
   intro wi;
   induction œÜ using Modal.Formula.rec' generalizing i with
    | hfalsum => simp [Realization.interpret, Semantics.Realize, Satisfies];
    | hatom a =>
      simp only [Realization.interpret, SolovaySentences.realization];
      constructor;
      . intro h;
        apply disj_mem!;
        simp;
        use i;
        constructor;
        . split;
          . contradiction;
          . simpa;
        . rfl;
      . intro h;
        apply conj_disj_demorgan‚ÇÇ_suppl'!;
        have : T ‚ä¢!. Œ¶.Œ¶[i] ‚ûù ‚ãÄ(List.finRange Œ¶.length |>.filter (i ‚â† ¬∑) |>.map (Œª j => ‚àºŒ¶.Œ¶[j])) := by
          apply deduct'!;
          apply iff_provable_list_conj.mpr;
          intro q hq;
          obtain ‚ü®j, hj, rfl‚ü© := List.mem_map.mp hq;
          exact deductInv'! $ Œ¶.S2 i j (by simpa using List.of_mem_filter hj);
        exact imp_trans''! this $ conjconj_subset! $ by
          simp;
          intro j hj;
          use j;
          constructor;
          . rintro rfl;
            have : wi ‚äß (atom a) := by simpa [hi] using hj;
            contradiction;
          . rfl;
    | himp œÜ œà ihœÜ ihœà =>
      simp only [Realization.interpret];
      constructor;
      . intro h;
        rcases (not_or_of_imp $ Satisfies.imp_def.mp h) with (hp | hq);
        . apply deduct'!;
          exact efq_imply_not‚ÇÅ! ‚®Ä (deductInv'! $ ihœÜ i hi |>.2 hp)
        . apply deduct'!;
          exact imply‚ÇÅ'! $ deductInv'! $ ihœà i hi |>.1 hq;
      . intro h;
        have := Satisfies.imp_def.not.mp h; push_neg at this;
        replace ‚ü®hp, hq‚ü© := this;
        have hp := ihœÜ i hi |>.1 hp;
        have hq := ihœà i hi |>.2 hq;
        exact not_imply_prem''! hp hq;
    | hbox œÜ ihœÜ =>
      simp only [Realization.interpret];
      constructor;
      . intro h;
        apply imp_trans''! (Œ¶.S3 i hi) ?_;
        apply prov_distribute_imply;
        apply disj_intro;
        intro j hj;
        simp at hj;
        obtain ‚ü®j, ‚ü®hj‚ÇÇ, rfl‚ü©‚ü© := hj;
        apply ihœÜ j (by rintro rfl; simp at hj‚ÇÇ) |>.1;
        apply h;
        exact hj‚ÇÇ;
      . intro h;
        have := Satisfies.box_def.not.mp h; push_neg at this;
        obtain ‚ü®wj, hwj, hwj'‚ü© := this;
        let j := M.get_index wj;
        have : T ‚ä¢!. Œ¶.Œ¶[‚Üëj + 1] ‚ûù ‚àºŒ¶.realization.interpret ùîÖ œÜ := ihœÜ ‚ü®j.1 + 1, by simp‚ü© (by simp) |>.2 (by convert hwj'; simp [j]);
        have h‚ÇÅ := ùîÖ.prov_distribute_imply $ contra‚ÇÅ'! this;
        have h‚ÇÇ := Œ¶.S4 i hi ‚ü®j.1 + 1, by simp‚ü© (by simp) (by convert hwj; simp [j]);
        exact contra‚ÇÅ'! $ imp_trans''! h‚ÇÅ h‚ÇÇ;

lemma lemma4 (h : ¬¨M.root ‚äß œÜ) : T ‚ä¢!. Œ¶.Œ¶[1] ‚ûù ‚àº(Œ¶.realization.interpret ùîÖ œÜ) := by
  apply lemma3 Œ¶ ‚ü®1, by simp‚ü© (by simp) œÜ |>.2;
  convert h;
  exact FiniteTransitiveTree.get_world_zero_root;

end LO.ProvabilityLogic
