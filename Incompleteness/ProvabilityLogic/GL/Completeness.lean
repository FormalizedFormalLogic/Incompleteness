import Incompleteness.ProvabilityLogic.GL.SolovaySentences

namespace LO

open Classical

open System (Consistent)
open Modal
open FirstOrder.DerivabilityCondition
open ProvabilityLogic


variable {T : FirstOrder.Theory ‚Ñí‚Çí·µ£} [ùêë‚ÇÄ ‚âº T] [ùêàùö∫‚ÇÅ ‚âº T] [System.Consistent T] [T.Delta1Definable] [‚Ñï ‚äß‚Çò* T]

namespace Modal.Hilbert.GL

open FirstOrder.Theory (standardDP)

theorem arithmetical_completeness : (‚àÄ {f : Realization _ _}, T ‚ä¢!. f.interpret (standardDP T T) A) ‚Üí (Hilbert.GL ‚Ñï) ‚ä¢! A := by
  contrapose;
  intro h;
  obtain ‚ü®M, h‚ü© := @Hilbert.GL.Kripke.unprovable_iff_exists_unsatisfies_at_root_on_FiniteTransitiveTree A |>.mp h;
  letI Œ¶ := M‚Üß.solovaySentences (standardDP T T);
  push_neg;
  use Œ¶.realization;
  refine SolovaySentences.lemma3 Œ¶ h ?_;
  . intro k hk;
    apply FirstOrder.Arith.provable‚Çê_sound (T := T) (U := T);
    exact hk;

instance : ArithmeticalComplete (Hilbert.GL ‚Ñï) (standardDP T T) := ‚ü®arithmetical_completeness‚ü©

end Modal.Hilbert.GL


end LO
