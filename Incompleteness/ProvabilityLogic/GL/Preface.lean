import Foundation.Modal.Kripke.GL.Tree
import Incompleteness.ProvabilityLogic.Basic
import Mathlib.Data.Finite.Card


section

lemma _root_.Nat.lt_succ_sub {i : ‚Ñï} (hi : i ‚â† 0) : i < n + 1 ‚Üí i - 1 < n := by induction i <;> simp_all;

end


namespace LO.System

open FiniteContext

variable {F : Type*} [LogicalConnective F] [DecidableEq F]
         {S : Type*} [System F S]
         {ùì¢ : S} [System.Classical ùì¢]
         {p q r : F}
         {Œì Œî : List F}

lemma conj_disj_demorgan‚ÇÇ'! (h : ùì¢ ‚ä¢! ‚ãÄŒì.map (‚àº¬∑)) : ùì¢ ‚ä¢! ‚àº‚ãÅŒì := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp;
  | hsingle q => simp_all;
  | hcons q Œì hŒì ih =>
    replace h : ùì¢ ‚ä¢! ‚àºq ‚ãè (‚ãÄŒì.map (‚àº¬∑)) := by
      have e := List.conj‚ÇÇ_cons_nonempty (a := ‚àºq) (as := Œì.map (‚àº¬∑)) (by simpa using hŒì);
      simpa [‚Üêe] using h;
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    apply demorgan‚ÇÇ'!;
    apply and‚ÇÉ'!;
    . exact and‚ÇÅ'! h;
    . exact ih $ and‚ÇÇ'! h

lemma conj_disj_demorgan‚ÇÇ_suppl'! (h : ùì¢ ‚ä¢! p ‚ûù ‚ãÄŒì.map (‚àº¬∑)) : ùì¢ ‚ä¢! p ‚ûù ‚àº‚ãÅŒì :=
  deduct'! $ conj_disj_demorgan‚ÇÇ'! $ (of'! h) ‚®Ä by_axm!

omit [DecidableEq F] in
lemma disj_mem! (h : p ‚àà Œì) : ùì¢ ‚ä¢! p ‚ûù ‚ãÅŒì := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp at h;
  | hsingle q =>
    replace h : p = q := by simpa using h;
    subst h;
    simp;
  | hcons q Œì hŒì ih =>
    replace h : p = q ‚à® p ‚àà Œì := by simpa using h;
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    rcases h with (rfl | h);
    . exact or‚ÇÅ!;
    . exact imply_right_or'! $ ih h

lemma not_imply_prem''! (hpq : ùì¢ ‚ä¢! p ‚ûù q) (hpnr : ùì¢ ‚ä¢! p ‚ûù ‚àº(r)) : ùì¢ ‚ä¢! p ‚ûù ‚àº(q ‚ûù r) :=
  deduct'! $ (contra‚ÇÄ'! $ not_or_of_imply!) ‚®Ä (demorgan‚ÇÇ'! $ and‚ÇÉ'! (dni'! $ of'! hpq ‚®Ä (by_axm!)) (of'! hpnr ‚®Ä (by_axm!)))

lemma disj_intro! (h : ‚àÄ q ‚àà Œì, ùì¢ ‚ä¢! q ‚ûù p) : ùì¢ ‚ä¢! ‚ãÅŒì ‚ûù p := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp;
  | hsingle q => simp_all;
  | hcons q Œì hŒì ih =>
    simp [List.disj‚ÇÇ_cons_nonempty (a := q) hŒì];
    obtain ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := by simpa using h;
    replace h‚ÇÇ := ih h‚ÇÇ;
    exact or‚ÇÉ''! h‚ÇÅ h‚ÇÇ;

lemma disj_outro! [System.Consistent ùì¢]
  (h‚ÇÅ : ùì¢ ‚ä¢! ‚ãÅŒì) (h‚ÇÇ : ‚àÄ q ‚àà Œì, ùì¢ ‚ä¢! q ‚ûù p) : ùì¢ ‚ä¢! p := by
  induction Œì using List.induction_with_singleton with
  | hnil =>
    obtain ‚ü®f, hf‚ü© := Consistent.exists_unprovable (ùì¢ := ùì¢) (by assumption);
    have : ùì¢ ‚ä¢! f := efq'! $ by simpa using h‚ÇÅ;
    contradiction;
  | hsingle r =>
    simp_all;
    exact h‚ÇÇ ‚®Ä h‚ÇÅ;
  | hcons q Œì hŒì ih =>
    simp_all;
    have ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ‚ü© := h‚ÇÇ;
    apply or‚ÇÉ'''! (d‚ÇÉ := h‚ÇÅ);
    . exact h‚ÇÇ‚ÇÅ;
    . apply disj_intro!;
      exact h‚ÇÇ‚ÇÇ;


/-
section

-- TODO: cancel class

lemma cancel_or_left! (cancel : ‚àÄ {p}, ùì¢ ‚ä¨ p ‚Üí ùì¢ ‚ä¢! ‚àºp) (hpq : ùì¢ ‚ä¢! p ‚ãé q) (hp : ùì¢ ‚ä¨ p) : ùì¢ ‚ä¢! q := by
  apply or‚ÇÉ'''! (ùì¢ := ùì¢) (œÜ := p) (œà := q) (œá := q);
  . apply imply_of_not_or'!;
    apply or‚ÇÅ'!;
    apply cancel hp;
  . simp;
  . assumption;

lemma cancel_or_right! (cancel : ‚àÄ {p}, ùì¢ ‚ä¨ p ‚Üí ùì¢ ‚ä¢! ‚àºp) (hpq : ùì¢ ‚ä¢! p ‚ãé q) (hq : ùì¢ ‚ä¨ q) : ùì¢ ‚ä¢! p := by
  apply cancel_or_left! (p := q) (q := p) cancel;
  . exact or_comm'! hpq;
  . exact hq;

lemma disj_tail! (cancel : ‚àÄ {p}, ùì¢ ‚ä¨ p ‚Üí ùì¢ ‚ä¢! ‚àºp) (Œì_nil : Œì.length > 0) (h‚ÇÅ : ùì¢ ‚ä¢! ‚ãÅŒì) (h‚ÇÇ : ùì¢ ‚ä¨ Œì[0]) : ùì¢ ‚ä¢! ‚ãÅ(Œì.tail) := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp at Œì_nil;
  | hsingle q => simp_all;
  | hcons q Œì hŒì ih =>
    simp_all;
    exact cancel_or_left! cancel h‚ÇÅ h‚ÇÇ;

end
-/

lemma cancel_or_left! (hpq : ùì¢ ‚ä¢! p ‚ãé q) (hp : ùì¢ ‚ä¢! ‚àºp) : ùì¢ ‚ä¢! q := by
  apply or‚ÇÉ'''! (ùì¢ := ùì¢) (œÜ := p) (œà := q) (œá := q);
  . apply imply_of_not_or'!;
    apply or‚ÇÅ'!;
    apply hp;
  . simp;
  . assumption;

lemma cancel_or_right! (hpq : ùì¢ ‚ä¢! p ‚ãé q) (hq : ùì¢ ‚ä¢! ‚àºq) : ùì¢ ‚ä¢! p := by
  apply cancel_or_left! (p := q) (q := p);
  . exact or_comm'! hpq;
  . exact hq;

lemma disj_tail! (Œì_nil : Œì.length > 0) (h‚ÇÅ : ùì¢ ‚ä¢! ‚ãÅŒì) (h‚ÇÇ : ùì¢ ‚ä¢! ‚àºŒì[0]) : ùì¢ ‚ä¢! ‚ãÅ(Œì.tail) := by
  induction Œì using List.induction_with_singleton with
  | hnil => simp at Œì_nil;
  | hsingle q =>
    simp at h‚ÇÅ h‚ÇÇ;
    replace h‚ÇÇ := neg_equiv'!.mp h‚ÇÇ;
    exact efq'! $ h‚ÇÇ ‚®Ä h‚ÇÅ
  | hcons q Œì hŒì ih =>
    simp_all;
    exact cancel_or_left! h‚ÇÅ h‚ÇÇ;

end LO.System



namespace LO.Modal.Kripke

open Modal.Formula.Kripke

namespace FiniteTransitiveTree

variable {F : FiniteTransitiveTree}

noncomputable def size (F : FiniteTransitiveTree) : ‚Ñï := Nat.card F.World

@[simp] lemma size_le_0 : 0 < F.size := Finite.card_pos

def world_selector (F : FiniteTransitiveTree) : Fin F.size ‚Üí F.World := by sorry

lemma world_selector.bijective : (Function.Bijective F.world_selector) := by sorry

lemma world_selector.zero : F.world_selector ‚ü®0, by simp‚ü© = F.root := by sorry;


noncomputable def get_world (F : FiniteTransitiveTree) (i : Fin F.size) : F.World := F.world_selector i

lemma get_world_zero_root : F.get_world ‚ü®0, by simp‚ü© = F.root := world_selector.zero

noncomputable def get_index (F : FiniteTransitiveTree) (w : F.World) : Fin F.size := world_selector.bijective.2 w |>.choose

lemma get_index_get_world : F.get_index (F.get_world i) = i := by sorry;

set_option pp.proofs true in
@[simp]
lemma get_world_get_index : F.get_world (F.get_index wi) = wi := by
  simp [get_world, get_index];
  sorry;

@[simp]
lemma cannotback_zero : ¬¨(x ‚â∫ F.get_world ‚ü®0, by simp‚ü©) := by
  rw [get_world_zero_root];
  sorry;

end FiniteTransitiveTree


instance {M : FiniteTransitiveTreeModel} : Semantics (Modal.Formula ‚Ñï) (M.World) := ‚ü®Œª b a => Satisfies M.toModel b a‚ü©


end LO.Modal.Kripke
